import java.util.stream.Collectors
import groovy.json.JsonSlurper

plugins {
    id("java")
    // get the newest version from https://github.com/JetBrains/intellij-platform-plugin-template/blob/main/build.gradle.kts
    // it seems the template is no longer updated: https://youtrack.jetbrains.com/issue/IDEA-291468
    id("org.jetbrains.intellij") version "1.10.1"
    // Gradle Changelog Plugin
    id("org.jetbrains.changelog") version "1.3.1"
    // Gradle Qodana Plugin
    id("org.jetbrains.qodana") version "0.1.13"
}

def findPythonPluginVersion(int pythonPluginId, String compatibleProduct, String productVersion) {
    if (pythonPluginId == 631) {
        return "213.6777.52"
    } else if (pythonPluginId == 7322) {
        return "213.6777.52"
    }
    for (int pageNumber=1; pageNumber<=20; pageNumber++) {
        // https://stackoverflow.com/questions/46275623/reading-json-file-from-remote-url-in-groovy
        def pluginUpdatesUrl = 'https://plugins.jetbrains.com/api/plugins/' + pythonPluginId + '/updates?page=' + pageNumber
        updateInfoPage = new JsonSlurper().parse(pluginUpdatesUrl.toURL())
        for (def versionInfo : updateInfoPage) {
            def compatibleProductVersions = version.get('compatibleVersions').get(compatibleProduct)
            if (compatibleProductVersions == productVersion || versionMatches(productVersion, compatibleProductVersions)) {
                return versionInfo.version
            }
        }
    }
}

group = project.findProperty("pluginGroup")
version = project.findProperty("pluginVersion")

def intellijVersion = System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_testVersion") ?: project.findProperty("platformVersion")
def intellijType = System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_testType") ?: project.findProperty("platformType")
def intellijPlugins = Arrays.stream(project.findProperty("platformPlugins").split(',')).map(String::trim).filter((s) -> s.length() > 0).collect(Collectors.toList())
def buildDownloadSources = project.findProperty("platformDownloadSources").toBoolean()

def intellijMinorVersion = intellijVersion.substring(0, 6)
if (intellijType == 'PC') {
    // PyCharm Community python plugin
    intellijPlugins.add('PythonCore')
    // see https://plugins.jetbrains.com/plugin/7322-python-community-edition/versions
} else if (intellijType == 'PY') {
    // PyCharm Professional uses another python plugin
    intellijPlugins.add('Pythonid')
    // see https://plugins.jetbrains.com/plugin/631-python/versions
} else if (intellijType == 'IU') {
    // TODO resolve release number to build number for plugin Pythonid
    // https://plugins.jetbrains.com/api/plugins/631/updates
    intellijPlugins.add('Pythonid:' + findPythonPluginVersion(631, "IDEA", intellijVersion))
} else if (intellijType == 'IC') {
    // TODO resolve release number to build number for plugin PythonCore
    // https://plugins.jetbrains.com/api/plugins/7322/updates
    intellijPlugins.add('PythonCore:' + findPythonPluginVersion(7322, "IDEA_COMMUNITY", intellijVersion))
}
if (intellijType == 'PY') {
    // we can get no sources for pycharm professional
    buildDownloadSources = false
}
if (intellijType == 'PY' && intellijMinorVersion in ['2022.1', '2022.2']) {
    // https://youtrack.jetbrains.com/issue/IJSDK-1427/Running-tests-for-PyCharm-Professional-is-not-working
    // testing with PY since 2022.1 requires to also add com.intellij.platform.images (automatically provided in PC)
    intellijPlugins.add('com.intellij.platform.images')
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("junit:junit:4.13.2")
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName.set(project.findProperty("pluginName"))
    version.set(intellijVersion)
    type.set(intellijType)
    downloadSources.set(buildDownloadSources)
    plugins.set(intellijPlugins)
    // this needs to be false to be able to leave out the until-build in plugin.xml
    updateSinceUntilBuild.set(false)
}

// workaround for tests not being found in 2021.3+
// see https://youtrack.jetbrains.com/issue/IDEA-278926#focus=Comments-27-5561012.0-0
allprojects {
    test {
        scanForTestClasses false
        include "**/*Test.class"
        include "**/Test*.class"
        exclude "**/Abstract*Test.class"
        exclude "**/BaseOdooPluginTest.class"
    }
}

// make sure we read java files with utf-8 (on US-ASCII build systems)
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

tasks {
    sourceCompatibility = 11
    targetCompatibility = 11

    wrapper {
        gradleVersion = project.findProperty("gradleVersion")
    }

    runIde {
        // enable DebugAttachDetector
        jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED', '-Xmx16G'
        //jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED', '-agentpath:/home/bigbear3001/bin/YourKit-JavaProfiler-2020.7/bin/linux-x86-64/libyjpagent.so=disablestacktelemetry,exceptions=disable,delay=10000'

    }

    runPluginVerifier {
        ideVersions.set(Arrays.stream(project.findProperty("pluginVerifierIdeVersions").split(',')).map(String::trim).filter((s) -> s.length() > 0).collect(Collectors.toList()))
    }


    patchPluginXml {
        version.set(project.findProperty("pluginVersion"))
        // please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description
        sinceBuild.set(project.findProperty("pluginSinceBuild"))
        // we do not use untilBuild
    }

    publishPlugin {
        token.set(System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_intellijPublishToken"))
    }

}
