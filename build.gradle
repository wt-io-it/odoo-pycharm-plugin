import java.util.stream.Collectors

plugins {
    id("java")
    // get the newest version from https://github.com/JetBrains/intellij-platform-plugin-template/blob/main/build.gradle.kts
    id("org.jetbrains.intellij") version '1.2.1'
    // Gradle Changelog Plugin
    id("org.jetbrains.changelog") version "1.3.0"
    // Gradle Qodana Plugin
    id("org.jetbrains.qodana") version "0.1.12"
}


group = project.findProperty("pluginGroup")
version = project.findProperty("pluginVersion")

def intellijVersion = System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_testVersion") ?: project.findProperty("platformVersion")
def intellijType = System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_testType") ?: project.findProperty("platformType")
def intellijPlugins = Arrays.stream(project.findProperty("platformPlugins").split(',')).map(String::trim).filter((s) -> s.length() > 0).collect(Collectors.toList())
def buildDownloadSources = project.findProperty("platformDownloadSources").toBoolean()

if (intellijVersion != '2019.2' && intellijType == 'PC') {
    // only pycharm 2019.2 seems to provide com.jetbrains.python.psi itself
    intellijPlugins.add('PythonCore')
    // see https://plugins.jetbrains.com/plugin/7322-python-community-edition/versions
} else if (intellijVersion != '2019.2' && intellijType == 'PY') {
    // PyCharm Professional uses another python plugin
    intellijPlugins.add('Pythonid')
    // see https://plugins.jetbrains.com/plugin/631-python/versions
}
if (intellijType == 'PY' || intellijType == 'PC') {
    buildDownloadSources = false
}

repositories {
    mavenCentral()
}

dependencies {
    //testCompile group: 'junit', name: 'junit', version: '4.12'
    //testCompile group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName.set(project.findProperty("pluginName"))
    version.set(intellijVersion)
    type.set(intellijType)
    downloadSources.set(buildDownloadSources)
    plugins.set(intellijPlugins)
    // this needs to be false to be able to leave out the until-build in plugin.xml
    updateSinceUntilBuild.set(false)
}

tasks {
    // for compatibility with 2019.x
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    wrapper {
        gradleVersion = project.findProperty("gradleVersion")
    }

    runIde {
        // enable DebugAttachDetector
        jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED', '-Xmx16G'
        //jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED', '-agentpath:/home/bigbear3001/bin/YourKit-JavaProfiler-2020.7/bin/linux-x86-64/libyjpagent.so=disablestacktelemetry,exceptions=disable,delay=10000'

    }

    runPluginVerifier {
        ideVersions.set(Arrays.stream(project.findProperty("pluginVerifierIdeVersions").split(',')).map(String::trim).filter((s) -> s.length() > 0).collect(Collectors.toList()))
    }


    patchPluginXml {
        version.set(project.findProperty("pluginVersion"))
        // please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description
        sinceBuild.set(project.findProperty("pluginSinceBuild"))
        // we do not use untilBuild
    }

    publishPlugin {
        token.set(System.getenv("AT_WTIOIT_PYCHARM_PLUGIN_intellijPublishToken"))
    }
}
